
SFB_LABSI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001300  00001394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000094  00800120  00800120  000013b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001084  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d0  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bc  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  000037fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00003a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000867  00000000  00000000  00004062  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000048c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__vector_7>
      20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_18>
      4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	63 42       	sbci	r22, 0x23	; 35
      98:	36 b7       	in	r19, 0x36	; 54
      9a:	9b d8       	rcall	.-3786   	; 0xfffff1d2 <__eeprom_end+0xff7ef1d2>
      9c:	a7 1a       	sub	r10, r23
      9e:	39 68       	ori	r19, 0x89	; 137
      a0:	56 18       	sub	r5, r6
      a2:	ae ba       	out	0x1e, r10	; 30
      a4:	ab 55       	subi	r26, 0x5B	; 91
      a6:	8c 1d       	adc	r24, r12
      a8:	3c b7       	in	r19, 0x3c	; 60
      aa:	cc 57       	subi	r28, 0x7C	; 124
      ac:	63 bd       	out	0x23, r22	; 35
      ae:	6d ed       	ldi	r22, 0xDD	; 221
      b0:	fd 75       	andi	r31, 0x5D	; 93
      b2:	3e f6       	brtc	.-114    	; 0x42 <__SREG__+0x3>
      b4:	17 72       	andi	r17, 0x27	; 39
      b6:	31 bf       	out	0x31, r19	; 49
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 00       	.word	0x003f	; ????

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e0 e0       	ldi	r30, 0x00	; 0
      d2:	f3 e1       	ldi	r31, 0x13	; 19
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a0 32       	cpi	r26, 0x20	; 32
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	21 e0       	ldi	r18, 0x01	; 1
      e2:	a0 e2       	ldi	r26, 0x20	; 32
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a4 3b       	cpi	r26, 0xB4	; 180
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	0e 94 1f 04 	call	0x83e	; 0x83e <main>
      f4:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <_exit>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
      fc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     100:	8c e0       	ldi	r24, 0x0C	; 12
     102:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     106:	08 95       	ret

00000108 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     108:	94 ea       	ldi	r25, 0xA4	; 164
     10a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     10e:	ec eb       	ldi	r30, 0xBC	; 188
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	90 81       	ld	r25, Z
     114:	99 23       	and	r25, r25
     116:	ec f7       	brge	.-6      	; 0x112 <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     118:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     11c:	98 7f       	andi	r25, 0xF8	; 248
     11e:	90 31       	cpi	r25, 0x10	; 16
     120:	99 f4       	brne	.+38     	; 0x148 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     122:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     126:	84 e8       	ldi	r24, 0x84	; 132
     128:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     12c:	ec eb       	ldi	r30, 0xBC	; 188
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	80 81       	ld	r24, Z
     132:	88 23       	and	r24, r24
     134:	ec f7       	brge	.-6      	; 0x130 <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     136:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     13a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     13c:	80 34       	cpi	r24, 0x40	; 64
     13e:	31 f0       	breq	.+12     	; 0x14c <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     140:	80 32       	cpi	r24, 0x20	; 32
     142:	31 f0       	breq	.+12     	; 0x150 <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     150:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     152:	08 95       	ret

00000154 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     154:	84 e9       	ldi	r24, 0x94	; 148
     156:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     15a:	ec eb       	ldi	r30, 0xBC	; 188
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	84 fd       	sbrc	r24, 4
     162:	fd cf       	rjmp	.-6      	; 0x15e <I2C_Stop+0xa>
}
     164:	08 95       	ret

00000166 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     166:	bf 92       	push	r11
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     17a:	cc eb       	ldi	r28, 0xBC	; 188
     17c:	d0 e0       	ldi	r29, 0x00	; 0
     17e:	0f 2e       	mov	r0, r31
     180:	f4 ea       	ldi	r31, 0xA4	; 164
     182:	df 2e       	mov	r13, r31
     184:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     186:	09 eb       	ldi	r16, 0xB9	; 185
     188:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     18a:	0f 2e       	mov	r0, r31
     18c:	fb eb       	ldi	r31, 0xBB	; 187
     18e:	ef 2e       	mov	r14, r31
     190:	f1 2c       	mov	r15, r1
     192:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     194:	0f 2e       	mov	r0, r31
     196:	f4 e8       	ldi	r31, 0x84	; 132
     198:	cf 2e       	mov	r12, r31
     19a:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     19c:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     19e:	88 81       	ld	r24, Y
     1a0:	88 23       	and	r24, r24
     1a2:	ec f7       	brge	.-6      	; 0x19e <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     1a4:	f8 01       	movw	r30, r16
     1a6:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     1a8:	88 7f       	andi	r24, 0xF8	; 248
     1aa:	88 30       	cpi	r24, 0x08	; 8
     1ac:	b9 f7       	brne	.-18     	; 0x19c <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     1ae:	f7 01       	movw	r30, r14
     1b0:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     1b2:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     1b4:	88 81       	ld	r24, Y
     1b6:	88 23       	and	r24, r24
     1b8:	ec f7       	brge	.-6      	; 0x1b4 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     1ba:	f8 01       	movw	r30, r16
     1bc:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     1be:	88 7f       	andi	r24, 0xF8	; 248
     1c0:	88 31       	cpi	r24, 0x18	; 24
     1c2:	19 f0       	breq	.+6      	; 0x1ca <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
     1c4:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
			continue;										/* continue with start loop again */
     1c8:	e9 cf       	rjmp	.-46     	; 0x19c <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	df 90       	pop	r13
     1d8:	cf 90       	pop	r12
     1da:	bf 90       	pop	r11
     1dc:	08 95       	ret

000001de <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     1de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     1e2:	84 e8       	ldi	r24, 0x84	; 132
     1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     1e8:	ec eb       	ldi	r30, 0xBC	; 188
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	88 23       	and	r24, r24
     1f0:	ec f7       	brge	.-6      	; 0x1ec <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1f6:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     1f8:	88 32       	cpi	r24, 0x28	; 40
     1fa:	21 f0       	breq	.+8      	; 0x204 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     1fc:	80 33       	cpi	r24, 0x30	; 48
     1fe:	21 f0       	breq	.+8      	; 0x208 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     208:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     20a:	08 95       	ret

0000020c <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     20c:	84 ec       	ldi	r24, 0xC4	; 196
     20e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     212:	ec eb       	ldi	r30, 0xBC	; 188
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	88 23       	and	r24, r24
     21a:	ec f7       	brge	.-6      	; 0x216 <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
     21c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}	
     220:	08 95       	ret

00000222 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     222:	84 e8       	ldi	r24, 0x84	; 132
     224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     228:	ec eb       	ldi	r30, 0xBC	; 188
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	88 23       	and	r24, r24
     230:	ec f7       	brge	.-6      	; 0x22c <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
     232:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}	
     236:	08 95       	ret

00000238 <SendMessage>:
	if (_pid >= umax)
	{
		_pid = umax;
	}
	return _pid;
}
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
     23e:	28 81       	ld	r18, Y
     240:	22 23       	and	r18, r18
     242:	89 f0       	breq	.+34     	; 0x266 <SendMessage+0x2e>
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	e0 ec       	ldi	r30, 0xC0	; 192
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	46 ec       	ldi	r20, 0xC6	; 198
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	90 81       	ld	r25, Z
     250:	95 ff       	sbrs	r25, 5
     252:	fd cf       	rjmp	.-6      	; 0x24e <SendMessage+0x16>
     254:	da 01       	movw	r26, r20
     256:	2c 93       	st	X, r18
     258:	3f 5f       	subi	r19, 0xFF	; 255
     25a:	de 01       	movw	r26, r28
     25c:	a3 0f       	add	r26, r19
     25e:	b1 1d       	adc	r27, r1
     260:	2c 91       	ld	r18, X
     262:	21 11       	cpse	r18, r1
     264:	f4 cf       	rjmp	.-24     	; 0x24e <SendMessage+0x16>
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <inic>:
     26c:	8f e0       	ldi	r24, 0x0F	; 15
     26e:	87 b9       	out	0x07, r24	; 7
     270:	86 e0       	ldi	r24, 0x06	; 6
     272:	84 b9       	out	0x04, r24	; 4
     274:	98 e7       	ldi	r25, 0x78	; 120
     276:	9a b9       	out	0x0a, r25	; 10
     278:	98 e6       	ldi	r25, 0x68	; 104
     27a:	9b b9       	out	0x0b, r25	; 11
     27c:	93 e0       	ldi	r25, 0x03	; 3
     27e:	98 b9       	out	0x08, r25	; 8
     280:	90 e5       	ldi	r25, 0x50	; 80
     282:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     286:	9c e0       	ldi	r25, 0x0C	; 12
     288:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     28c:	2f ef       	ldi	r18, 0xFF	; 255
     28e:	3f ef       	ldi	r19, 0xFF	; 255
     290:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     294:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     298:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     29c:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     2a0:	92 e0       	ldi	r25, 0x02	; 2
     2a2:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     2a6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     2aa:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     2ae:	28 e5       	ldi	r18, 0x58	; 88
     2b0:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     2b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2b8:	23 e3       	ldi	r18, 0x33	; 51
     2ba:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2be:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     2c2:	98 e9       	ldi	r25, 0x98	; 152
     2c4:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     2c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     2cc:	78 94       	sei
     2ce:	87 e1       	ldi	r24, 0x17	; 23
     2d0:	e8 e0       	ldi	r30, 0x08	; 8
     2d2:	f1 e0       	ldi	r31, 0x01	; 1
     2d4:	a2 e7       	ldi	r26, 0x72	; 114
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	01 90       	ld	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	8a 95       	dec	r24
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <inic+0x6c>
     2e0:	82 e7       	ldi	r24, 0x72	; 114
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 1c 01 	call	0x238	; 0x238 <SendMessage>
     2e8:	08 95       	ret

000002ea <MPU6050_Init>:
     2ea:	2f ef       	ldi	r18, 0xFF	; 255
     2ec:	84 e3       	ldi	r24, 0x34	; 52
     2ee:	9c e0       	ldi	r25, 0x0C	; 12
     2f0:	21 50       	subi	r18, 0x01	; 1
     2f2:	80 40       	sbci	r24, 0x00	; 0
     2f4:	90 40       	sbci	r25, 0x00	; 0
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <MPU6050_Init+0x6>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <MPU6050_Init+0x10>
     2fa:	00 00       	nop
     2fc:	80 ed       	ldi	r24, 0xD0	; 208
     2fe:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Start_Wait>
     302:	89 e1       	ldi	r24, 0x19	; 25
     304:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     308:	87 e0       	ldi	r24, 0x07	; 7
     30a:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     30e:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
     312:	80 ed       	ldi	r24, 0xD0	; 208
     314:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Start_Wait>
     318:	8b e6       	ldi	r24, 0x6B	; 107
     31a:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     324:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
     328:	80 ed       	ldi	r24, 0xD0	; 208
     32a:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Start_Wait>
     32e:	8a e1       	ldi	r24, 0x1A	; 26
     330:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     33a:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
     33e:	80 ed       	ldi	r24, 0xD0	; 208
     340:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Start_Wait>
     344:	8b e1       	ldi	r24, 0x1B	; 27
     346:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     34a:	88 e1       	ldi	r24, 0x18	; 24
     34c:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     350:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
     354:	80 ed       	ldi	r24, 0xD0	; 208
     356:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Start_Wait>
     35a:	88 e3       	ldi	r24, 0x38	; 56
     35c:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     366:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
     36a:	08 95       	ret

0000036c <MPU_Start_Loc>:
     36c:	80 ed       	ldi	r24, 0xD0	; 208
     36e:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Start_Wait>
     372:	8b e3       	ldi	r24, 0x3B	; 59
     374:	0e 94 ef 00 	call	0x1de	; 0x1de <I2C_Write>
     378:	81 ed       	ldi	r24, 0xD1	; 209
     37a:	0e 94 84 00 	call	0x108	; 0x108 <I2C_Repeated_Start>
     37e:	08 95       	ret

00000380 <Read_RawValue>:
     380:	cf 93       	push	r28
     382:	0e 94 b6 01 	call	0x36c	; 0x36c <MPU_Start_Loc>
     386:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     38a:	c8 2f       	mov	r28, r24
     38c:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     390:	6c 2f       	mov	r22, r28
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	76 2f       	mov	r23, r22
     396:	66 27       	eor	r22, r22
     398:	68 2b       	or	r22, r24
     39a:	07 2e       	mov	r0, r23
     39c:	00 0c       	add	r0, r0
     39e:	88 0b       	sbc	r24, r24
     3a0:	99 0b       	sbc	r25, r25
     3a2:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     3a6:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <Acc_x>
     3aa:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <Acc_x+0x1>
     3ae:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <Acc_x+0x2>
     3b2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <Acc_x+0x3>
     3b6:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     3ba:	c8 2f       	mov	r28, r24
     3bc:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     3c0:	6c 2f       	mov	r22, r28
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	76 2f       	mov	r23, r22
     3c6:	66 27       	eor	r22, r22
     3c8:	68 2b       	or	r22, r24
     3ca:	07 2e       	mov	r0, r23
     3cc:	00 0c       	add	r0, r0
     3ce:	88 0b       	sbc	r24, r24
     3d0:	99 0b       	sbc	r25, r25
     3d2:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     3d6:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <Acc_y>
     3da:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <Acc_y+0x1>
     3de:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <Acc_y+0x2>
     3e2:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <Acc_y+0x3>
     3e6:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     3ea:	c8 2f       	mov	r28, r24
     3ec:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     3f0:	6c 2f       	mov	r22, r28
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	76 2f       	mov	r23, r22
     3f6:	66 27       	eor	r22, r22
     3f8:	68 2b       	or	r22, r24
     3fa:	07 2e       	mov	r0, r23
     3fc:	00 0c       	add	r0, r0
     3fe:	88 0b       	sbc	r24, r24
     400:	99 0b       	sbc	r25, r25
     402:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     406:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <Acc_z>
     40a:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <Acc_z+0x1>
     40e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <Acc_z+0x2>
     412:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <Acc_z+0x3>
     416:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     41a:	c8 2f       	mov	r28, r24
     41c:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     420:	6c 2f       	mov	r22, r28
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	76 2f       	mov	r23, r22
     426:	66 27       	eor	r22, r22
     428:	68 2b       	or	r22, r24
     42a:	07 2e       	mov	r0, r23
     42c:	00 0c       	add	r0, r0
     42e:	88 0b       	sbc	r24, r24
     430:	99 0b       	sbc	r25, r25
     432:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     436:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <Gyro_x>
     43a:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <Gyro_x+0x1>
     43e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <Gyro_x+0x2>
     442:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <Gyro_x+0x3>
     446:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     44a:	c8 2f       	mov	r28, r24
     44c:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     450:	6c 2f       	mov	r22, r28
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	76 2f       	mov	r23, r22
     456:	66 27       	eor	r22, r22
     458:	68 2b       	or	r22, r24
     45a:	07 2e       	mov	r0, r23
     45c:	00 0c       	add	r0, r0
     45e:	88 0b       	sbc	r24, r24
     460:	99 0b       	sbc	r25, r25
     462:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     466:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <Gyro_y>
     46a:	70 93 b1 01 	sts	0x01B1, r23	; 0x8001b1 <Gyro_y+0x1>
     46e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Gyro_y+0x2>
     472:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <Gyro_y+0x3>
     476:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Read_Ack>
     47a:	c8 2f       	mov	r28, r24
     47c:	0e 94 11 01 	call	0x222	; 0x222 <I2C_Read_Nack>
     480:	6c 2f       	mov	r22, r28
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	76 2f       	mov	r23, r22
     486:	66 27       	eor	r22, r22
     488:	68 2b       	or	r22, r24
     48a:	07 2e       	mov	r0, r23
     48c:	00 0c       	add	r0, r0
     48e:	88 0b       	sbc	r24, r24
     490:	99 0b       	sbc	r25, r25
     492:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     496:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <Gyro_z>
     49a:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <Gyro_z+0x1>
     49e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Gyro_z+0x2>
     4a2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <Gyro_z+0x3>
     4a6:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Stop>
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <AngleCalc>:
     4ae:	4f 92       	push	r4
     4b0:	5f 92       	push	r5
     4b2:	6f 92       	push	r6
     4b4:	7f 92       	push	r7
     4b6:	8f 92       	push	r8
     4b8:	9f 92       	push	r9
     4ba:	af 92       	push	r10
     4bc:	bf 92       	push	r11
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <AngleCalc+0x1e>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <AngleCalc+0x20>
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	40 90 6c 01 	lds	r4, 0x016C	; 0x80016c <Acc_x>
     4d6:	50 90 6d 01 	lds	r5, 0x016D	; 0x80016d <Acc_x+0x1>
     4da:	60 90 6e 01 	lds	r6, 0x016E	; 0x80016e <Acc_x+0x2>
     4de:	70 90 6f 01 	lds	r7, 0x016F	; 0x80016f <Acc_x+0x3>
     4e2:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <Acc_y>
     4e6:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <Acc_y+0x1>
     4ea:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <Acc_y+0x2>
     4ee:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <Acc_y+0x3>
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e8       	ldi	r20, 0x80	; 128
     4f8:	58 e3       	ldi	r21, 0x38	; 56
     4fa:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     4fe:	4b 01       	movw	r8, r22
     500:	5c 01       	movw	r10, r24
     502:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <Acc_z>
     506:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <Acc_z+0x1>
     50a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <Acc_z+0x2>
     50e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <Acc_z+0x3>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e8       	ldi	r20, 0x80	; 128
     518:	58 e3       	ldi	r21, 0x38	; 56
     51a:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     51e:	6b 01       	movw	r12, r22
     520:	7c 01       	movw	r14, r24
     522:	a5 01       	movw	r20, r10
     524:	94 01       	movw	r18, r8
     526:	c5 01       	movw	r24, r10
     528:	b4 01       	movw	r22, r8
     52a:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     52e:	69 83       	std	Y+1, r22	; 0x01
     530:	7a 83       	std	Y+2, r23	; 0x02
     532:	8b 83       	std	Y+3, r24	; 0x03
     534:	9c 83       	std	Y+4, r25	; 0x04
     536:	a5 01       	movw	r20, r10
     538:	94 01       	movw	r18, r8
     53a:	c5 01       	movw	r24, r10
     53c:	b4 01       	movw	r22, r8
     53e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     542:	4b 01       	movw	r8, r22
     544:	5c 01       	movw	r10, r24
     546:	a7 01       	movw	r20, r14
     548:	96 01       	movw	r18, r12
     54a:	c7 01       	movw	r24, r14
     54c:	b6 01       	movw	r22, r12
     54e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     552:	9b 01       	movw	r18, r22
     554:	ac 01       	movw	r20, r24
     556:	c5 01       	movw	r24, r10
     558:	b4 01       	movw	r22, r8
     55a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__addsf3>
     55e:	0e 94 25 09 	call	0x124a	; 0x124a <sqrt>
     562:	6b 01       	movw	r12, r22
     564:	7c 01       	movw	r14, r24
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e8       	ldi	r20, 0x80	; 128
     56c:	58 e3       	ldi	r21, 0x38	; 56
     56e:	c3 01       	movw	r24, r6
     570:	b2 01       	movw	r22, r4
     572:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     576:	90 58       	subi	r25, 0x80	; 128
     578:	a7 01       	movw	r20, r14
     57a:	96 01       	movw	r18, r12
     57c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divsf3>
     580:	0e 94 48 06 	call	0xc90	; 0xc90 <atan>
     584:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     588:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     58c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     590:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     594:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     598:	6b 01       	movw	r12, r22
     59a:	7c 01       	movw	r14, r24
     59c:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <Acceleration_angle+0x4>
     5a0:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <Acceleration_angle+0x5>
     5a4:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Acceleration_angle+0x6>
     5a8:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <Acceleration_angle+0x7>
     5ac:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <Gyro_y>
     5b0:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <Gyro_y+0x1>
     5b4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <Gyro_y+0x2>
     5b8:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <Gyro_y+0x3>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	43 e0       	ldi	r20, 0x03	; 3
     5c2:	53 e4       	ldi	r21, 0x43	; 67
     5c4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divsf3>
     5c8:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <Gyro_angle+0x4>
     5cc:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <Gyro_angle+0x5>
     5d0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <Gyro_angle+0x6>
     5d4:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <Gyro_angle+0x7>
     5d8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <elapsedTime>
     5dc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <elapsedTime+0x1>
     5e0:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <elapsedTime+0x2>
     5e4:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <elapsedTime+0x3>
     5e8:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     5ec:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <Total_angle+0x4>
     5f0:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <Total_angle+0x5>
     5f4:	40 91 ae 01 	lds	r20, 0x01AE	; 0x8001ae <Total_angle+0x6>
     5f8:	50 91 af 01 	lds	r21, 0x01AF	; 0x8001af <Total_angle+0x7>
     5fc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__addsf3>
     600:	28 e4       	ldi	r18, 0x48	; 72
     602:	31 ee       	ldi	r19, 0xE1	; 225
     604:	4a e7       	ldi	r20, 0x7A	; 122
     606:	5f e3       	ldi	r21, 0x3F	; 63
     608:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     60c:	4b 01       	movw	r8, r22
     60e:	5c 01       	movw	r10, r24
     610:	2a e0       	ldi	r18, 0x0A	; 10
     612:	37 ed       	ldi	r19, 0xD7	; 215
     614:	43 ea       	ldi	r20, 0xA3	; 163
     616:	5c e3       	ldi	r21, 0x3C	; 60
     618:	c7 01       	movw	r24, r14
     61a:	b6 01       	movw	r22, r12
     61c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	c5 01       	movw	r24, r10
     626:	b4 01       	movw	r22, r8
     628:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__addsf3>
     62c:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <Total_angle+0x4>
     630:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <Total_angle+0x5>
     634:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <Total_angle+0x6>
     638:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <Total_angle+0x7>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	9f 90       	pop	r9
     656:	8f 90       	pop	r8
     658:	7f 90       	pop	r7
     65a:	6f 90       	pop	r6
     65c:	5f 90       	pop	r5
     65e:	4f 90       	pop	r4
     660:	08 95       	ret

00000662 <PID>:

void PID()
{
     662:	8f 92       	push	r8
     664:	9f 92       	push	r9
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
	error = Total_angle[1] - desired_angle;
     67a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__data_end>
     67e:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__data_end+0x1>
     682:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <__data_end+0x2>
     686:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <__data_end+0x3>
     68a:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <Total_angle+0x4>
     68e:	70 91 ad 01 	lds	r23, 0x01AD	; 0x8001ad <Total_angle+0x5>
     692:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <Total_angle+0x6>
     696:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <Total_angle+0x7>
     69a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__subsf3>
     69e:	0e 94 28 07 	call	0xe50	; 0xe50 <__fixsfsi>
     6a2:	6b 01       	movw	r12, r22
     6a4:	7c 01       	movw	r14, r24
     6a6:	8b 01       	movw	r16, r22
     6a8:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <error+0x1>
     6ac:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <error>
	
	pid_i =+ki*(error+previous_error);
     6b0:	c0 91 a6 01 	lds	r28, 0x01A6	; 0x8001a6 <previous_error>
     6b4:	d0 91 a7 01 	lds	r29, 0x01A7	; 0x8001a7 <previous_error+0x1>
     6b8:	be 01       	movw	r22, r28
     6ba:	6c 0d       	add	r22, r12
     6bc:	7d 1d       	adc	r23, r13
     6be:	07 2e       	mov	r0, r23
     6c0:	00 0c       	add	r0, r0
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     6ca:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <ki>
     6ce:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <ki+0x1>
     6d2:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <ki+0x2>
     6d6:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <ki+0x3>
     6da:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     6de:	4b 01       	movw	r8, r22
     6e0:	5c 01       	movw	r10, r24
	Total_angle[1] = 0.98 *(Total_angle[1] + Gyro_angle[1]*elapsedTime) + 0.02*Acceleration_angle[1];
}

float sat(float _pid, int umin, int umax)
{
	if (_pid <= umin)
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e8       	ldi	r20, 0x80	; 128
     6e8:	5f eb       	ldi	r21, 0xBF	; 191
     6ea:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	84 f4       	brge	.+32     	; 0x712 <PID+0xb0>
	{
		_pid = umin;
	}

	if (_pid >= umax)
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e4       	ldi	r21, 0x40	; 64
     6fa:	c5 01       	movw	r24, r10
     6fc:	b4 01       	movw	r22, r8
     6fe:	0e 94 37 08 	call	0x106e	; 0x106e <__gesf2>
     702:	88 23       	and	r24, r24
     704:	74 f0       	brlt	.+28     	; 0x722 <PID+0xc0>
	{
		_pid = umax;
     706:	81 2c       	mov	r8, r1
     708:	91 2c       	mov	r9, r1
     70a:	54 01       	movw	r10, r8
     70c:	68 94       	set
     70e:	b6 f8       	bld	r11, 6
     710:	08 c0       	rjmp	.+16     	; 0x722 <PID+0xc0>

float sat(float _pid, int umin, int umax)
{
	if (_pid <= umin)
	{
		_pid = umin;
     712:	0f 2e       	mov	r0, r31
     714:	81 2c       	mov	r8, r1
     716:	91 2c       	mov	r9, r1
     718:	f0 e8       	ldi	r31, 0x80	; 128
     71a:	af 2e       	mov	r10, r31
     71c:	ff eb       	ldi	r31, 0xBF	; 191
     71e:	bf 2e       	mov	r11, r31
     720:	f0 2d       	mov	r31, r0
void PID()
{
	error = Total_angle[1] - desired_angle;
	
	pid_i =+ki*(error+previous_error);
	pid_i = sat(pid_i,-1.5,2);
     722:	80 92 34 01 	sts	0x0134, r8	; 0x800134 <pid_i>
     726:	90 92 35 01 	sts	0x0135, r9	; 0x800135 <pid_i+0x1>
     72a:	a0 92 36 01 	sts	0x0136, r10	; 0x800136 <pid_i+0x2>
     72e:	b0 92 37 01 	sts	0x0137, r11	; 0x800137 <pid_i+0x3>
	pid_tot = previous_pid_tot + kp* (error-previous_error) + pid_i;
     732:	b6 01       	movw	r22, r12
     734:	6c 1b       	sub	r22, r28
     736:	7d 0b       	sbc	r23, r29
     738:	07 2e       	mov	r0, r23
     73a:	00 0c       	add	r0, r0
     73c:	88 0b       	sbc	r24, r24
     73e:	99 0b       	sbc	r25, r25
     740:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     744:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <kp>
     748:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <kp+0x1>
     74c:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <kp+0x2>
     750:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <kp+0x3>
     754:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     758:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <previous_pid_tot>
     75c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <previous_pid_tot+0x1>
     760:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <previous_pid_tot+0x2>
     764:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <previous_pid_tot+0x3>
     768:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__addsf3>
     76c:	a5 01       	movw	r20, r10
     76e:	94 01       	movw	r18, r8
     770:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__addsf3>
     774:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <pid_tot>
     778:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <pid_tot+0x1>
     77c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pid_tot+0x2>
     780:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <pid_tot+0x3>
	
	//change motors direction
	if (error < 0)
     784:	11 23       	and	r17, r17
     786:	3c f4       	brge	.+14     	; 0x796 <PID+0x134>
	{
		PORTC = 0b00000000;
     788:	18 b8       	out	0x08, r1	; 8
	}
	if (error >= 0)
     78a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <error>
     78e:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <error+0x1>
     792:	99 23       	and	r25, r25
     794:	14 f0       	brlt	.+4      	; 0x79a <PID+0x138>
	{
		PORTC = 0b00000011;
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	88 b9       	out	0x08, r24	; 8
	}

	
	pid_tot = sat(pid_tot,-9,9);		//-10 10
     79a:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <pid_tot>
     79e:	d0 90 31 01 	lds	r13, 0x0131	; 0x800131 <pid_tot+0x1>
     7a2:	e0 90 32 01 	lds	r14, 0x0132	; 0x800132 <pid_tot+0x2>
     7a6:	f0 90 33 01 	lds	r15, 0x0133	; 0x800133 <pid_tot+0x3>
	Total_angle[1] = 0.98 *(Total_angle[1] + Gyro_angle[1]*elapsedTime) + 0.02*Acceleration_angle[1];
}

float sat(float _pid, int umin, int umax)
{
	if (_pid <= umin)
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e1       	ldi	r20, 0x10	; 16
     7b0:	51 ec       	ldi	r21, 0xC1	; 193
     7b2:	c7 01       	movw	r24, r14
     7b4:	b6 01       	movw	r22, r12
     7b6:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     7ba:	18 16       	cp	r1, r24
     7bc:	9c f4       	brge	.+38     	; 0x7e4 <PID+0x182>
	{
		_pid = umin;
	}

	if (_pid >= umax)
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e1       	ldi	r20, 0x10	; 16
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	c7 01       	movw	r24, r14
     7c8:	b6 01       	movw	r22, r12
     7ca:	0e 94 37 08 	call	0x106e	; 0x106e <__gesf2>
     7ce:	88 23       	and	r24, r24
     7d0:	8c f0       	brlt	.+34     	; 0x7f4 <PID+0x192>
	{
		_pid = umax;
     7d2:	0f 2e       	mov	r0, r31
     7d4:	c1 2c       	mov	r12, r1
     7d6:	d1 2c       	mov	r13, r1
     7d8:	f0 e1       	ldi	r31, 0x10	; 16
     7da:	ef 2e       	mov	r14, r31
     7dc:	f1 e4       	ldi	r31, 0x41	; 65
     7de:	ff 2e       	mov	r15, r31
     7e0:	f0 2d       	mov	r31, r0
     7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <PID+0x192>

float sat(float _pid, int umin, int umax)
{
	if (_pid <= umin)
	{
		_pid = umin;
     7e4:	0f 2e       	mov	r0, r31
     7e6:	c1 2c       	mov	r12, r1
     7e8:	d1 2c       	mov	r13, r1
     7ea:	f0 e1       	ldi	r31, 0x10	; 16
     7ec:	ef 2e       	mov	r14, r31
     7ee:	f1 ec       	ldi	r31, 0xC1	; 193
     7f0:	ff 2e       	mov	r15, r31
     7f2:	f0 2d       	mov	r31, r0
	{
		PORTC = 0b00000011;
	}

	
	pid_tot = sat(pid_tot,-9,9);		//-10 10
     7f4:	c0 92 30 01 	sts	0x0130, r12	; 0x800130 <pid_tot>
     7f8:	d0 92 31 01 	sts	0x0131, r13	; 0x800131 <pid_tot+0x1>
     7fc:	e0 92 32 01 	sts	0x0132, r14	; 0x800132 <pid_tot+0x2>
     800:	f0 92 33 01 	sts	0x0133, r15	; 0x800133 <pid_tot+0x3>
	
	
	previous_error = error;
     804:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <error>
     808:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <error+0x1>
     80c:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <previous_error+0x1>
     810:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <previous_error>
	previous_pid_tot = pid_tot;
     814:	c0 92 2c 01 	sts	0x012C, r12	; 0x80012c <previous_pid_tot>
     818:	d0 92 2d 01 	sts	0x012D, r13	; 0x80012d <previous_pid_tot+0x1>
     81c:	e0 92 2e 01 	sts	0x012E, r14	; 0x80012e <previous_pid_tot+0x2>
     820:	f0 92 2f 01 	sts	0x012F, r15	; 0x80012f <previous_pid_tot+0x3>
	
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	bf 90       	pop	r11
     836:	af 90       	pop	r10
     838:	9f 90       	pop	r9
     83a:	8f 90       	pop	r8
     83c:	08 95       	ret

0000083e <main>:


int main()
{
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	1f 92       	push	r1
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
	inic();                                              // Main configurations
     848:	0e 94 36 01 	call	0x26c	; 0x26c <inic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     84c:	2f ef       	ldi	r18, 0xFF	; 255
     84e:	89 e6       	ldi	r24, 0x69	; 105
     850:	98 e1       	ldi	r25, 0x18	; 24
     852:	21 50       	subi	r18, 0x01	; 1
     854:	80 40       	sbci	r24, 0x00	; 0
     856:	90 40       	sbci	r25, 0x00	; 0
     858:	e1 f7       	brne	.-8      	; 0x852 <main+0x14>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <main+0x1e>
     85c:	00 00       	nop
	_delay_ms(500);
	I2C_Init();                                          // Initialize I2C
     85e:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_Init>
	MPU6050_Init();                                      // Initialize MPU6050
     862:	0e 94 75 01 	call	0x2ea	; 0x2ea <MPU6050_Init>
	desired_angle = 0;
     866:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
     86a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x1>
     86e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end+0x2>
     872:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x3>
	kp =0.55;
     876:	8d ec       	ldi	r24, 0xCD	; 205
     878:	9c ec       	ldi	r25, 0xCC	; 204
     87a:	ac e0       	ldi	r26, 0x0C	; 12
     87c:	bf e3       	ldi	r27, 0x3F	; 63
     87e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <kp>
     882:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <kp+0x1>
     886:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <kp+0x2>
     88a:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <kp+0x3>
	ki = ((kp/0.9)*(elapsedTime/2));					//kp/1
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <elapsedTime>
     89a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <elapsedTime+0x1>
     89e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <elapsedTime+0x2>
     8a2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <elapsedTime+0x3>
     8a6:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     8aa:	28 ec       	ldi	r18, 0xC8	; 200
     8ac:	31 e7       	ldi	r19, 0x71	; 113
     8ae:	4c e1       	ldi	r20, 0x1C	; 28
     8b0:	5f e3       	ldi	r21, 0x3F	; 63
     8b2:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     8b6:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <ki>
     8ba:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <ki+0x1>
     8be:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ki+0x2>
     8c2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ki+0x3>

	while(1)
	{
		//Set SETPOINT
		if((PIND & (1 << PIND2)) == 0 ) {
			OCR1A = 65535;
     8c6:	0f 2e       	mov	r0, r31
     8c8:	f8 e8       	ldi	r31, 0x88	; 136
     8ca:	cf 2e       	mov	r12, r31
     8cc:	d1 2c       	mov	r13, r1
     8ce:	f0 2d       	mov	r31, r0
			OCR1B = 65535;
     8d0:	0f 2e       	mov	r0, r31
     8d2:	fa e8       	ldi	r31, 0x8A	; 138
     8d4:	ef 2e       	mov	r14, r31
     8d6:	f1 2c       	mov	r15, r1
     8d8:	f0 2d       	mov	r31, r0
			desired_angle = Total_angle[1];
     8da:	08 ea       	ldi	r16, 0xA8	; 168
     8dc:	11 e0       	ldi	r17, 0x01	; 1

	while(1)
	{
		//Set SETPOINT
		if((PIND & (1 << PIND2)) == 0 ) {
			OCR1A = 65535;
     8de:	33 24       	eor	r3, r3
     8e0:	3a 94       	dec	r3
     8e2:	ef ef       	ldi	r30, 0xFF	; 255
     8e4:	e9 83       	std	Y+1, r30	; 0x01
			}
			else if ((Total_angle[1] >= -0.5) && (Total_angle[1] <= 0)) {
				PWM = 65000;
			}
			
			if ((Total_angle[1]>30) | (Total_angle[1]<-30))
     8e6:	77 24       	eor	r7, r7
     8e8:	73 94       	inc	r7
     8ea:	61 2c       	mov	r6, r1
				previous_error=0;
				previous_pid_tot=0;
			}


			if (TCNT1 >= PWM){
     8ec:	0f 2e       	mov	r0, r31
     8ee:	f4 e8       	ldi	r31, 0x84	; 132
     8f0:	4f 2e       	mov	r4, r31
     8f2:	51 2c       	mov	r5, r1
     8f4:	f0 2d       	mov	r31, r0
	ki = ((kp/0.9)*(elapsedTime/2));					//kp/1

	while(1)
	{
		//Set SETPOINT
		if((PIND & (1 << PIND2)) == 0 ) {
     8f6:	4a 99       	sbic	0x09, 2	; 9
     8f8:	15 c0       	rjmp	.+42     	; 0x924 <__stack+0x25>
			OCR1A = 65535;
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	9f ef       	ldi	r25, 0xFF	; 255
     8fe:	f6 01       	movw	r30, r12
     900:	91 83       	std	Z+1, r25	; 0x01
     902:	80 83       	st	Z, r24
			OCR1B = 65535;
     904:	f7 01       	movw	r30, r14
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	80 83       	st	Z, r24
			desired_angle = Total_angle[1];
     90a:	f8 01       	movw	r30, r16
     90c:	84 81       	ldd	r24, Z+4	; 0x04
     90e:	95 81       	ldd	r25, Z+5	; 0x05
     910:	a6 81       	ldd	r26, Z+6	; 0x06
     912:	b7 81       	ldd	r27, Z+7	; 0x07
     914:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
     918:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
     91c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <__data_end+0x2>
     920:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <__data_end+0x3>
			
		}
		
		if (timerFlag==1)
     924:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timerFlag>
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	29 f7       	brne	.-54     	; 0x8f6 <main+0xb8>
		{
			Read_RawValue();	// Read gyro and acc from MPU6050
     92c:	0e 94 c0 01 	call	0x380	; 0x380 <Read_RawValue>
			AngleCalc();
     930:	0e 94 57 02 	call	0x4ae	; 0x4ae <AngleCalc>
			
			PID();
     934:	0e 94 31 03 	call	0x662	; 0x662 <PID>
			
			PWM = 40.302*exp(-0.31*abs(pid_tot)); // a que funciona fixe
     938:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <pid_tot>
     93c:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <pid_tot+0x1>
     940:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pid_tot+0x2>
     944:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pid_tot+0x3>
     948:	0e 94 28 07 	call	0xe50	; 0xe50 <__fixsfsi>
     94c:	9b 01       	movw	r18, r22
     94e:	77 23       	and	r23, r23
     950:	24 f4       	brge	.+8      	; 0x95a <__stack+0x5b>
     952:	22 27       	eor	r18, r18
     954:	33 27       	eor	r19, r19
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	b9 01       	movw	r22, r18
     95c:	33 0f       	add	r19, r19
     95e:	88 0b       	sbc	r24, r24
     960:	99 0b       	sbc	r25, r25
     962:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     966:	22 e5       	ldi	r18, 0x52	; 82
     968:	38 eb       	ldi	r19, 0xB8	; 184
     96a:	4e e9       	ldi	r20, 0x9E	; 158
     96c:	5e eb       	ldi	r21, 0xBE	; 190
     96e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     972:	0e 94 f6 06 	call	0xdec	; 0xdec <exp>
     976:	2f e3       	ldi	r18, 0x3F	; 63
     978:	35 e3       	ldi	r19, 0x35	; 53
     97a:	41 e2       	ldi	r20, 0x21	; 33
     97c:	52 e4       	ldi	r21, 0x42	; 66
     97e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     982:	0e 94 28 07 	call	0xe50	; 0xe50 <__fixsfsi>
     986:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <PWM+0x1>
     98a:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <PWM>
			if ((error > -0.05) && (error <= 0.05)) PWM =10800;
     98e:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <error>
     992:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <error+0x1>
     996:	07 2e       	mov	r0, r23
     998:	00 0c       	add	r0, r0
     99a:	88 0b       	sbc	r24, r24
     99c:	99 0b       	sbc	r25, r25
     99e:	0e 94 60 07 	call	0xec0	; 0xec0 <__floatsisf>
     9a2:	4b 01       	movw	r8, r22
     9a4:	5c 01       	movw	r10, r24
     9a6:	2d ec       	ldi	r18, 0xCD	; 205
     9a8:	3c ec       	ldi	r19, 0xCC	; 204
     9aa:	4c e4       	ldi	r20, 0x4C	; 76
     9ac:	5d eb       	ldi	r21, 0xBD	; 189
     9ae:	0e 94 37 08 	call	0x106e	; 0x106e <__gesf2>
     9b2:	18 16       	cp	r1, r24
     9b4:	84 f4       	brge	.+32     	; 0x9d6 <__stack+0xd7>
     9b6:	2d ec       	ldi	r18, 0xCD	; 205
     9b8:	3c ec       	ldi	r19, 0xCC	; 204
     9ba:	4c e4       	ldi	r20, 0x4C	; 76
     9bc:	5d e3       	ldi	r21, 0x3D	; 61
     9be:	c5 01       	movw	r24, r10
     9c0:	b4 01       	movw	r22, r8
     9c2:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     9c6:	18 16       	cp	r1, r24
     9c8:	34 f0       	brlt	.+12     	; 0x9d6 <__stack+0xd7>
     9ca:	80 e3       	ldi	r24, 0x30	; 48
     9cc:	9a e2       	ldi	r25, 0x2A	; 42
     9ce:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <PWM+0x1>
     9d2:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <PWM>
			
			if ( (Total_angle[1] >= 0) && (Total_angle[1] <= 0.5)) {
     9d6:	f8 01       	movw	r30, r16
     9d8:	84 80       	ldd	r8, Z+4	; 0x04
     9da:	95 80       	ldd	r9, Z+5	; 0x05
     9dc:	a6 80       	ldd	r10, Z+6	; 0x06
     9de:	b7 80       	ldd	r11, Z+7	; 0x07
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	a9 01       	movw	r20, r18
     9e6:	c5 01       	movw	r24, r10
     9e8:	b4 01       	movw	r22, r8
     9ea:	0e 94 37 08 	call	0x106e	; 0x106e <__gesf2>
     9ee:	88 23       	and	r24, r24
     9f0:	8c f0       	brlt	.+34     	; 0xa14 <__stack+0x115>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	5f e3       	ldi	r21, 0x3F	; 63
     9fa:	c5 01       	movw	r24, r10
     9fc:	b4 01       	movw	r22, r8
     9fe:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     a02:	18 16       	cp	r1, r24
     a04:	3c f0       	brlt	.+14     	; 0xa14 <__stack+0x115>
				PWM = 65000;
     a06:	88 ee       	ldi	r24, 0xE8	; 232
     a08:	9d ef       	ldi	r25, 0xFD	; 253
     a0a:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <PWM+0x1>
     a0e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <PWM>
     a12:	19 c0       	rjmp	.+50     	; 0xa46 <__stack+0x147>
			}
			else if ((Total_angle[1] >= -0.5) && (Total_angle[1] <= 0)) {
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	5f eb       	ldi	r21, 0xBF	; 191
     a1c:	c5 01       	movw	r24, r10
     a1e:	b4 01       	movw	r22, r8
     a20:	0e 94 37 08 	call	0x106e	; 0x106e <__gesf2>
     a24:	88 23       	and	r24, r24
     a26:	7c f0       	brlt	.+30     	; 0xa46 <__stack+0x147>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	a9 01       	movw	r20, r18
     a2e:	c5 01       	movw	r24, r10
     a30:	b4 01       	movw	r22, r8
     a32:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     a36:	18 16       	cp	r1, r24
     a38:	34 f0       	brlt	.+12     	; 0xa46 <__stack+0x147>
				PWM = 65000;
     a3a:	e8 ee       	ldi	r30, 0xE8	; 232
     a3c:	fd ef       	ldi	r31, 0xFD	; 253
     a3e:	f0 93 71 01 	sts	0x0171, r31	; 0x800171 <PWM+0x1>
     a42:	e0 93 70 01 	sts	0x0170, r30	; 0x800170 <PWM>
			}
			
			if ((Total_angle[1]>30) | (Total_angle[1]<-30))
     a46:	27 2c       	mov	r2, r7
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 ef       	ldi	r20, 0xF0	; 240
     a4e:	51 e4       	ldi	r21, 0x41	; 65
     a50:	c5 01       	movw	r24, r10
     a52:	b4 01       	movw	r22, r8
     a54:	0e 94 37 08 	call	0x106e	; 0x106e <__gesf2>
     a58:	18 16       	cp	r1, r24
     a5a:	0c f0       	brlt	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	26 2c       	mov	r2, r6
     a5e:	21 10       	cpse	r2, r1
     a60:	0c c0       	rjmp	.+24     	; 0xa7a <__stack+0x17b>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 ef       	ldi	r20, 0xF0	; 240
     a68:	51 ec       	ldi	r21, 0xC1	; 193
     a6a:	c5 01       	movw	r24, r10
     a6c:	b4 01       	movw	r22, r8
     a6e:	0e 94 77 06 	call	0xcee	; 0xcee <__cmpsf2>
     a72:	88 0f       	add	r24, r24
     a74:	88 0b       	sbc	r24, r24
     a76:	87 21       	and	r24, r7
     a78:	09 f1       	breq	.+66     	; 0xabc <__stack+0x1bd>
			{
				PWM = 65535;
     a7a:	30 92 70 01 	sts	0x0170, r3	; 0x800170 <PWM>
     a7e:	f9 81       	ldd	r31, Y+1	; 0x01
     a80:	f0 93 71 01 	sts	0x0171, r31	; 0x800171 <PWM+0x1>
				pid_tot=0;
     a84:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <pid_tot>
     a88:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <pid_tot+0x1>
     a8c:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <pid_tot+0x2>
     a90:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <pid_tot+0x3>
				pid_i=0;
     a94:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <pid_i>
     a98:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <pid_i+0x1>
     a9c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <pid_i+0x2>
     aa0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <pid_i+0x3>
				previous_error=0;
     aa4:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <previous_error+0x1>
     aa8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <previous_error>
				previous_pid_tot=0;
     aac:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <previous_pid_tot>
     ab0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <previous_pid_tot+0x1>
     ab4:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <previous_pid_tot+0x2>
     ab8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <previous_pid_tot+0x3>
			}


			if (TCNT1 >= PWM){
     abc:	f2 01       	movw	r30, r4
     abe:	20 81       	ld	r18, Z
     ac0:	31 81       	ldd	r19, Z+1	; 0x01
     ac2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <PWM>
     ac6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <PWM+0x1>
     aca:	28 17       	cp	r18, r24
     acc:	39 07       	cpc	r19, r25
     ace:	88 f0       	brcs	.+34     	; 0xaf2 <__stack+0x1f3>
				TCNT1 = 0;
     ad0:	11 82       	std	Z+1, r1	; 0x01
     ad2:	10 82       	st	Z, r1
				OCR1A = PWM;
     ad4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <PWM>
     ad8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <PWM+0x1>
     adc:	f6 01       	movw	r30, r12
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24
				OCR1B = PWM;
     ae2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <PWM>
     ae6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <PWM+0x1>
     aea:	f7 01       	movw	r30, r14
     aec:	91 83       	std	Z+1, r25	; 0x01
     aee:	80 83       	st	Z, r24
     af0:	0a c0       	rjmp	.+20     	; 0xb06 <__stack+0x207>
			}
			else
			{
				OCR1A = PWM;
     af2:	f6 01       	movw	r30, r12
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	80 83       	st	Z, r24
				OCR1B = PWM;
     af8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <PWM>
     afc:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <PWM+0x1>
     b00:	f7 01       	movw	r30, r14
     b02:	91 83       	std	Z+1, r25	; 0x01
     b04:	80 83       	st	Z, r24
			}
			
			timerFlag=0;
     b06:	60 92 3a 01 	sts	0x013A, r6	; 0x80013a <timerFlag>
     b0a:	f5 ce       	rjmp	.-534    	; 0x8f6 <main+0xb8>

00000b0c <__vector_7>:
}


/* Interrupts */
ISR(TIMER2_COMPA_vect)
{
     b0c:	1f 92       	push	r1
     b0e:	0f 92       	push	r0
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	0f 92       	push	r0
     b14:	11 24       	eor	r1, r1
     b16:	2f 93       	push	r18
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
	
	if (timerFlag==0)
     b1c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <timerFlag>
     b20:	81 11       	cpse	r24, r1
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <__vector_7+0x1e>
	{
		timerFlag=1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timerFlag>
	}
	if (ledCounter==500) {
     b2a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ledCounter>
     b2e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <ledCounter+0x1>
     b32:	84 3f       	cpi	r24, 0xF4	; 244
     b34:	91 40       	sbci	r25, 0x01	; 1
     b36:	41 f4       	brne	.+16     	; 0xb48 <__vector_7+0x3c>
		PORTD ^= (1<<DDD3);
     b38:	9b b1       	in	r25, 0x0b	; 11
     b3a:	88 e0       	ldi	r24, 0x08	; 8
     b3c:	89 27       	eor	r24, r25
     b3e:	8b b9       	out	0x0b, r24	; 11
		ledCounter = 0;
     b40:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <ledCounter+0x1>
     b44:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <ledCounter>
	}
	ledCounter ++;
     b48:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <ledCounter>
     b4c:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <ledCounter+0x1>
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <ledCounter+0x1>
     b56:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <ledCounter>
}
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <__vector_18>:

ISR (USART_RX_vect)
{
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	8f 93       	push	r24
     b76:	ef 93       	push	r30
     b78:	ff 93       	push	r31
	rxUSART.status = UCSR0A;
     b7a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     b7e:	eb e3       	ldi	r30, 0x3B	; 59
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	81 83       	std	Z+1, r24	; 0x01
	if(rxUSART.status & ((1<<FE0) | (1<<DOR0) | (1<<UPE0)))
     b84:	81 81       	ldd	r24, Z+1	; 0x01
     b86:	8c 71       	andi	r24, 0x1C	; 28
     b88:	29 f0       	breq	.+10     	; 0xb94 <__vector_18+0x2a>
	rxUSART.error = 1;
     b8a:	ed e3       	ldi	r30, 0x3D	; 61
     b8c:	f1 e0       	ldi	r31, 0x01	; 1
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	80 83       	st	Z, r24
	rxUSART.receiver_buffer = UDR0;
     b94:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     b98:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <rxUSART>
	rxUSART.receive = 1;
     b9c:	ed e3       	ldi	r30, 0x3D	; 61
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	80 81       	ld	r24, Z
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	80 83       	st	Z, r24
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	8f 91       	pop	r24
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <__subsf3>:
     bb6:	50 58       	subi	r21, 0x80	; 128

00000bb8 <__addsf3>:
     bb8:	bb 27       	eor	r27, r27
     bba:	aa 27       	eor	r26, r26
     bbc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__addsf3x>
     bc0:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_round>
     bc4:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
     bc8:	38 f0       	brcs	.+14     	; 0xbd8 <__addsf3+0x20>
     bca:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
     bce:	20 f0       	brcs	.+8      	; 0xbd8 <__addsf3+0x20>
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__addsf3+0x28>
     bd2:	9f 3f       	cpi	r25, 0xFF	; 255
     bd4:	19 f4       	brne	.+6      	; 0xbdc <__addsf3+0x24>
     bd6:	26 f4       	brtc	.+8      	; 0xbe0 <__addsf3+0x28>
     bd8:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_nan>
     bdc:	0e f4       	brtc	.+2      	; 0xbe0 <__addsf3+0x28>
     bde:	e0 95       	com	r30
     be0:	e7 fb       	bst	r30, 7
     be2:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_inf>

00000be6 <__addsf3x>:
     be6:	e9 2f       	mov	r30, r25
     be8:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_split3>
     bec:	58 f3       	brcs	.-42     	; 0xbc4 <__addsf3+0xc>
     bee:	ba 17       	cp	r27, r26
     bf0:	62 07       	cpc	r22, r18
     bf2:	73 07       	cpc	r23, r19
     bf4:	84 07       	cpc	r24, r20
     bf6:	95 07       	cpc	r25, r21
     bf8:	20 f0       	brcs	.+8      	; 0xc02 <__addsf3x+0x1c>
     bfa:	79 f4       	brne	.+30     	; 0xc1a <__addsf3x+0x34>
     bfc:	a6 f5       	brtc	.+104    	; 0xc66 <__addsf3x+0x80>
     bfe:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_zero>
     c02:	0e f4       	brtc	.+2      	; 0xc06 <__addsf3x+0x20>
     c04:	e0 95       	com	r30
     c06:	0b 2e       	mov	r0, r27
     c08:	ba 2f       	mov	r27, r26
     c0a:	a0 2d       	mov	r26, r0
     c0c:	0b 01       	movw	r0, r22
     c0e:	b9 01       	movw	r22, r18
     c10:	90 01       	movw	r18, r0
     c12:	0c 01       	movw	r0, r24
     c14:	ca 01       	movw	r24, r20
     c16:	a0 01       	movw	r20, r0
     c18:	11 24       	eor	r1, r1
     c1a:	ff 27       	eor	r31, r31
     c1c:	59 1b       	sub	r21, r25
     c1e:	99 f0       	breq	.+38     	; 0xc46 <__addsf3x+0x60>
     c20:	59 3f       	cpi	r21, 0xF9	; 249
     c22:	50 f4       	brcc	.+20     	; 0xc38 <__addsf3x+0x52>
     c24:	50 3e       	cpi	r21, 0xE0	; 224
     c26:	68 f1       	brcs	.+90     	; 0xc82 <__addsf3x+0x9c>
     c28:	1a 16       	cp	r1, r26
     c2a:	f0 40       	sbci	r31, 0x00	; 0
     c2c:	a2 2f       	mov	r26, r18
     c2e:	23 2f       	mov	r18, r19
     c30:	34 2f       	mov	r19, r20
     c32:	44 27       	eor	r20, r20
     c34:	58 5f       	subi	r21, 0xF8	; 248
     c36:	f3 cf       	rjmp	.-26     	; 0xc1e <__addsf3x+0x38>
     c38:	46 95       	lsr	r20
     c3a:	37 95       	ror	r19
     c3c:	27 95       	ror	r18
     c3e:	a7 95       	ror	r26
     c40:	f0 40       	sbci	r31, 0x00	; 0
     c42:	53 95       	inc	r21
     c44:	c9 f7       	brne	.-14     	; 0xc38 <__addsf3x+0x52>
     c46:	7e f4       	brtc	.+30     	; 0xc66 <__addsf3x+0x80>
     c48:	1f 16       	cp	r1, r31
     c4a:	ba 0b       	sbc	r27, r26
     c4c:	62 0b       	sbc	r22, r18
     c4e:	73 0b       	sbc	r23, r19
     c50:	84 0b       	sbc	r24, r20
     c52:	ba f0       	brmi	.+46     	; 0xc82 <__addsf3x+0x9c>
     c54:	91 50       	subi	r25, 0x01	; 1
     c56:	a1 f0       	breq	.+40     	; 0xc80 <__addsf3x+0x9a>
     c58:	ff 0f       	add	r31, r31
     c5a:	bb 1f       	adc	r27, r27
     c5c:	66 1f       	adc	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	c2 f7       	brpl	.-16     	; 0xc54 <__addsf3x+0x6e>
     c64:	0e c0       	rjmp	.+28     	; 0xc82 <__addsf3x+0x9c>
     c66:	ba 0f       	add	r27, r26
     c68:	62 1f       	adc	r22, r18
     c6a:	73 1f       	adc	r23, r19
     c6c:	84 1f       	adc	r24, r20
     c6e:	48 f4       	brcc	.+18     	; 0xc82 <__addsf3x+0x9c>
     c70:	87 95       	ror	r24
     c72:	77 95       	ror	r23
     c74:	67 95       	ror	r22
     c76:	b7 95       	ror	r27
     c78:	f7 95       	ror	r31
     c7a:	9e 3f       	cpi	r25, 0xFE	; 254
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <__addsf3x+0x9a>
     c7e:	b0 cf       	rjmp	.-160    	; 0xbe0 <__addsf3+0x28>
     c80:	93 95       	inc	r25
     c82:	88 0f       	add	r24, r24
     c84:	08 f0       	brcs	.+2      	; 0xc88 <__addsf3x+0xa2>
     c86:	99 27       	eor	r25, r25
     c88:	ee 0f       	add	r30, r30
     c8a:	97 95       	ror	r25
     c8c:	87 95       	ror	r24
     c8e:	08 95       	ret

00000c90 <atan>:
     c90:	df 93       	push	r29
     c92:	dd 27       	eor	r29, r29
     c94:	b9 2f       	mov	r27, r25
     c96:	bf 77       	andi	r27, 0x7F	; 127
     c98:	40 e8       	ldi	r20, 0x80	; 128
     c9a:	5f e3       	ldi	r21, 0x3F	; 63
     c9c:	16 16       	cp	r1, r22
     c9e:	17 06       	cpc	r1, r23
     ca0:	48 07       	cpc	r20, r24
     ca2:	5b 07       	cpc	r21, r27
     ca4:	18 f4       	brcc	.+6      	; 0xcac <atan+0x1c>
     ca6:	d9 2f       	mov	r29, r25
     ca8:	0e 94 3c 08 	call	0x1078	; 0x1078 <inverse>
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	7f 93       	push	r23
     cb2:	6f 93       	push	r22
     cb4:	0e 94 65 09 	call	0x12ca	; 0x12ca <square>
     cb8:	e8 e6       	ldi	r30, 0x68	; 104
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fp_powser>
     cc0:	0e 94 fd 07 	call	0xffa	; 0xffa <__fp_round>
     cc4:	2f 91       	pop	r18
     cc6:	3f 91       	pop	r19
     cc8:	4f 91       	pop	r20
     cca:	5f 91       	pop	r21
     ccc:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
     cd0:	dd 23       	and	r29, r29
     cd2:	51 f0       	breq	.+20     	; 0xce8 <atan+0x58>
     cd4:	90 58       	subi	r25, 0x80	; 128
     cd6:	a2 ea       	ldi	r26, 0xA2	; 162
     cd8:	2a ed       	ldi	r18, 0xDA	; 218
     cda:	3f e0       	ldi	r19, 0x0F	; 15
     cdc:	49 ec       	ldi	r20, 0xC9	; 201
     cde:	5f e3       	ldi	r21, 0x3F	; 63
     ce0:	d0 78       	andi	r29, 0x80	; 128
     ce2:	5d 27       	eor	r21, r29
     ce4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__addsf3x>
     ce8:	df 91       	pop	r29
     cea:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_round>

00000cee <__cmpsf2>:
     cee:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_cmp>
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__cmpsf2+0x8>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	08 95       	ret

00000cf8 <__divsf3>:
     cf8:	0e 94 90 06 	call	0xd20	; 0xd20 <__divsf3x>
     cfc:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_round>
     d00:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
     d04:	58 f0       	brcs	.+22     	; 0xd1c <__divsf3+0x24>
     d06:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
     d0a:	40 f0       	brcs	.+16     	; 0xd1c <__divsf3+0x24>
     d0c:	29 f4       	brne	.+10     	; 0xd18 <__divsf3+0x20>
     d0e:	5f 3f       	cpi	r21, 0xFF	; 255
     d10:	29 f0       	breq	.+10     	; 0xd1c <__divsf3+0x24>
     d12:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_inf>
     d16:	51 11       	cpse	r21, r1
     d18:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>
     d1c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_nan>

00000d20 <__divsf3x>:
     d20:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_split3>
     d24:	68 f3       	brcs	.-38     	; 0xd00 <__divsf3+0x8>

00000d26 <__divsf3_pse>:
     d26:	99 23       	and	r25, r25
     d28:	b1 f3       	breq	.-20     	; 0xd16 <__divsf3+0x1e>
     d2a:	55 23       	and	r21, r21
     d2c:	91 f3       	breq	.-28     	; 0xd12 <__divsf3+0x1a>
     d2e:	95 1b       	sub	r25, r21
     d30:	55 0b       	sbc	r21, r21
     d32:	bb 27       	eor	r27, r27
     d34:	aa 27       	eor	r26, r26
     d36:	62 17       	cp	r22, r18
     d38:	73 07       	cpc	r23, r19
     d3a:	84 07       	cpc	r24, r20
     d3c:	38 f0       	brcs	.+14     	; 0xd4c <__divsf3_pse+0x26>
     d3e:	9f 5f       	subi	r25, 0xFF	; 255
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	44 1f       	adc	r20, r20
     d48:	aa 1f       	adc	r26, r26
     d4a:	a9 f3       	breq	.-22     	; 0xd36 <__divsf3_pse+0x10>
     d4c:	35 d0       	rcall	.+106    	; 0xdb8 <__divsf3_pse+0x92>
     d4e:	0e 2e       	mov	r0, r30
     d50:	3a f0       	brmi	.+14     	; 0xd60 <__divsf3_pse+0x3a>
     d52:	e0 e8       	ldi	r30, 0x80	; 128
     d54:	32 d0       	rcall	.+100    	; 0xdba <__divsf3_pse+0x94>
     d56:	91 50       	subi	r25, 0x01	; 1
     d58:	50 40       	sbci	r21, 0x00	; 0
     d5a:	e6 95       	lsr	r30
     d5c:	00 1c       	adc	r0, r0
     d5e:	ca f7       	brpl	.-14     	; 0xd52 <__divsf3_pse+0x2c>
     d60:	2b d0       	rcall	.+86     	; 0xdb8 <__divsf3_pse+0x92>
     d62:	fe 2f       	mov	r31, r30
     d64:	29 d0       	rcall	.+82     	; 0xdb8 <__divsf3_pse+0x92>
     d66:	66 0f       	add	r22, r22
     d68:	77 1f       	adc	r23, r23
     d6a:	88 1f       	adc	r24, r24
     d6c:	bb 1f       	adc	r27, r27
     d6e:	26 17       	cp	r18, r22
     d70:	37 07       	cpc	r19, r23
     d72:	48 07       	cpc	r20, r24
     d74:	ab 07       	cpc	r26, r27
     d76:	b0 e8       	ldi	r27, 0x80	; 128
     d78:	09 f0       	breq	.+2      	; 0xd7c <__divsf3_pse+0x56>
     d7a:	bb 0b       	sbc	r27, r27
     d7c:	80 2d       	mov	r24, r0
     d7e:	bf 01       	movw	r22, r30
     d80:	ff 27       	eor	r31, r31
     d82:	93 58       	subi	r25, 0x83	; 131
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	3a f0       	brmi	.+14     	; 0xd96 <__divsf3_pse+0x70>
     d88:	9e 3f       	cpi	r25, 0xFE	; 254
     d8a:	51 05       	cpc	r21, r1
     d8c:	78 f0       	brcs	.+30     	; 0xdac <__divsf3_pse+0x86>
     d8e:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_inf>
     d92:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>
     d96:	5f 3f       	cpi	r21, 0xFF	; 255
     d98:	e4 f3       	brlt	.-8      	; 0xd92 <__divsf3_pse+0x6c>
     d9a:	98 3e       	cpi	r25, 0xE8	; 232
     d9c:	d4 f3       	brlt	.-12     	; 0xd92 <__divsf3_pse+0x6c>
     d9e:	86 95       	lsr	r24
     da0:	77 95       	ror	r23
     da2:	67 95       	ror	r22
     da4:	b7 95       	ror	r27
     da6:	f7 95       	ror	r31
     da8:	9f 5f       	subi	r25, 0xFF	; 255
     daa:	c9 f7       	brne	.-14     	; 0xd9e <__divsf3_pse+0x78>
     dac:	88 0f       	add	r24, r24
     dae:	91 1d       	adc	r25, r1
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	97 f9       	bld	r25, 7
     db6:	08 95       	ret
     db8:	e1 e0       	ldi	r30, 0x01	; 1
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	bb 1f       	adc	r27, r27
     dc2:	62 17       	cp	r22, r18
     dc4:	73 07       	cpc	r23, r19
     dc6:	84 07       	cpc	r24, r20
     dc8:	ba 07       	cpc	r27, r26
     dca:	20 f0       	brcs	.+8      	; 0xdd4 <__divsf3_pse+0xae>
     dcc:	62 1b       	sub	r22, r18
     dce:	73 0b       	sbc	r23, r19
     dd0:	84 0b       	sbc	r24, r20
     dd2:	ba 0b       	sbc	r27, r26
     dd4:	ee 1f       	adc	r30, r30
     dd6:	88 f7       	brcc	.-30     	; 0xdba <__divsf3_pse+0x94>
     dd8:	e0 95       	com	r30
     dda:	08 95       	ret
     ddc:	29 f4       	brne	.+10     	; 0xde8 <__divsf3_pse+0xc2>
     dde:	16 f0       	brts	.+4      	; 0xde4 <__divsf3_pse+0xbe>
     de0:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_inf>
     de4:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_zero>
     de8:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_nan>

00000dec <exp>:
     dec:	0e 94 16 08 	call	0x102c	; 0x102c <__fp_splitA>
     df0:	a8 f3       	brcs	.-22     	; 0xddc <__divsf3_pse+0xb6>
     df2:	96 38       	cpi	r25, 0x86	; 134
     df4:	a0 f7       	brcc	.-24     	; 0xdde <__divsf3_pse+0xb8>
     df6:	07 f8       	bld	r0, 7
     df8:	0f 92       	push	r0
     dfa:	e8 94       	clt
     dfc:	2b e3       	ldi	r18, 0x3B	; 59
     dfe:	3a ea       	ldi	r19, 0xAA	; 170
     e00:	48 eb       	ldi	r20, 0xB8	; 184
     e02:	5f e7       	ldi	r21, 0x7F	; 127
     e04:	0e 94 c8 08 	call	0x1190	; 0x1190 <__mulsf3_pse>
     e08:	0f 92       	push	r0
     e0a:	0f 92       	push	r0
     e0c:	0f 92       	push	r0
     e0e:	4d b7       	in	r20, 0x3d	; 61
     e10:	5e b7       	in	r21, 0x3e	; 62
     e12:	0f 92       	push	r0
     e14:	0e 94 7e 08 	call	0x10fc	; 0x10fc <modf>
     e18:	e5 e9       	ldi	r30, 0x95	; 149
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fp_powser>
     e20:	4f 91       	pop	r20
     e22:	5f 91       	pop	r21
     e24:	ef 91       	pop	r30
     e26:	ff 91       	pop	r31
     e28:	e5 95       	asr	r30
     e2a:	ee 1f       	adc	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	49 f0       	breq	.+18     	; 0xe42 <exp+0x56>
     e30:	fe 57       	subi	r31, 0x7E	; 126
     e32:	e0 68       	ori	r30, 0x80	; 128
     e34:	44 27       	eor	r20, r20
     e36:	ee 0f       	add	r30, r30
     e38:	44 1f       	adc	r20, r20
     e3a:	fa 95       	dec	r31
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <exp+0x4a>
     e3e:	41 95       	neg	r20
     e40:	55 0b       	sbc	r21, r21
     e42:	0e 94 48 08 	call	0x1090	; 0x1090 <ldexp>
     e46:	0f 90       	pop	r0
     e48:	07 fe       	sbrs	r0, 7
     e4a:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <inverse>
     e4e:	08 95       	ret

00000e50 <__fixsfsi>:
     e50:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fixunssfsi>
     e54:	68 94       	set
     e56:	b1 11       	cpse	r27, r1
     e58:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>
     e5c:	08 95       	ret

00000e5e <__fixunssfsi>:
     e5e:	0e 94 16 08 	call	0x102c	; 0x102c <__fp_splitA>
     e62:	88 f0       	brcs	.+34     	; 0xe86 <__fixunssfsi+0x28>
     e64:	9f 57       	subi	r25, 0x7F	; 127
     e66:	98 f0       	brcs	.+38     	; 0xe8e <__fixunssfsi+0x30>
     e68:	b9 2f       	mov	r27, r25
     e6a:	99 27       	eor	r25, r25
     e6c:	b7 51       	subi	r27, 0x17	; 23
     e6e:	b0 f0       	brcs	.+44     	; 0xe9c <__fixunssfsi+0x3e>
     e70:	e1 f0       	breq	.+56     	; 0xeaa <__fixunssfsi+0x4c>
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	88 1f       	adc	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	1a f0       	brmi	.+6      	; 0xe82 <__fixunssfsi+0x24>
     e7c:	ba 95       	dec	r27
     e7e:	c9 f7       	brne	.-14     	; 0xe72 <__fixunssfsi+0x14>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <__fixunssfsi+0x4c>
     e82:	b1 30       	cpi	r27, 0x01	; 1
     e84:	91 f0       	breq	.+36     	; 0xeaa <__fixunssfsi+0x4c>
     e86:	0e 94 30 08 	call	0x1060	; 0x1060 <__fp_zero>
     e8a:	b1 e0       	ldi	r27, 0x01	; 1
     e8c:	08 95       	ret
     e8e:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_zero>
     e92:	67 2f       	mov	r22, r23
     e94:	78 2f       	mov	r23, r24
     e96:	88 27       	eor	r24, r24
     e98:	b8 5f       	subi	r27, 0xF8	; 248
     e9a:	39 f0       	breq	.+14     	; 0xeaa <__fixunssfsi+0x4c>
     e9c:	b9 3f       	cpi	r27, 0xF9	; 249
     e9e:	cc f3       	brlt	.-14     	; 0xe92 <__fixunssfsi+0x34>
     ea0:	86 95       	lsr	r24
     ea2:	77 95       	ror	r23
     ea4:	67 95       	ror	r22
     ea6:	b3 95       	inc	r27
     ea8:	d9 f7       	brne	.-10     	; 0xea0 <__fixunssfsi+0x42>
     eaa:	3e f4       	brtc	.+14     	; 0xeba <__fixunssfsi+0x5c>
     eac:	90 95       	com	r25
     eae:	80 95       	com	r24
     eb0:	70 95       	com	r23
     eb2:	61 95       	neg	r22
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	08 95       	ret

00000ebc <__floatunsisf>:
     ebc:	e8 94       	clt
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <__floatsisf+0x12>

00000ec0 <__floatsisf>:
     ec0:	97 fb       	bst	r25, 7
     ec2:	3e f4       	brtc	.+14     	; 0xed2 <__floatsisf+0x12>
     ec4:	90 95       	com	r25
     ec6:	80 95       	com	r24
     ec8:	70 95       	com	r23
     eca:	61 95       	neg	r22
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	99 23       	and	r25, r25
     ed4:	a9 f0       	breq	.+42     	; 0xf00 <__floatsisf+0x40>
     ed6:	f9 2f       	mov	r31, r25
     ed8:	96 e9       	ldi	r25, 0x96	; 150
     eda:	bb 27       	eor	r27, r27
     edc:	93 95       	inc	r25
     ede:	f6 95       	lsr	r31
     ee0:	87 95       	ror	r24
     ee2:	77 95       	ror	r23
     ee4:	67 95       	ror	r22
     ee6:	b7 95       	ror	r27
     ee8:	f1 11       	cpse	r31, r1
     eea:	f8 cf       	rjmp	.-16     	; 0xedc <__floatsisf+0x1c>
     eec:	fa f4       	brpl	.+62     	; 0xf2c <__floatsisf+0x6c>
     eee:	bb 0f       	add	r27, r27
     ef0:	11 f4       	brne	.+4      	; 0xef6 <__floatsisf+0x36>
     ef2:	60 ff       	sbrs	r22, 0
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <__floatsisf+0x6c>
     ef6:	6f 5f       	subi	r22, 0xFF	; 255
     ef8:	7f 4f       	sbci	r23, 0xFF	; 255
     efa:	8f 4f       	sbci	r24, 0xFF	; 255
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	16 c0       	rjmp	.+44     	; 0xf2c <__floatsisf+0x6c>
     f00:	88 23       	and	r24, r24
     f02:	11 f0       	breq	.+4      	; 0xf08 <__floatsisf+0x48>
     f04:	96 e9       	ldi	r25, 0x96	; 150
     f06:	11 c0       	rjmp	.+34     	; 0xf2a <__floatsisf+0x6a>
     f08:	77 23       	and	r23, r23
     f0a:	21 f0       	breq	.+8      	; 0xf14 <__floatsisf+0x54>
     f0c:	9e e8       	ldi	r25, 0x8E	; 142
     f0e:	87 2f       	mov	r24, r23
     f10:	76 2f       	mov	r23, r22
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__floatsisf+0x5e>
     f14:	66 23       	and	r22, r22
     f16:	71 f0       	breq	.+28     	; 0xf34 <__floatsisf+0x74>
     f18:	96 e8       	ldi	r25, 0x86	; 134
     f1a:	86 2f       	mov	r24, r22
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	2a f0       	brmi	.+10     	; 0xf2c <__floatsisf+0x6c>
     f22:	9a 95       	dec	r25
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	da f7       	brpl	.-10     	; 0xf22 <__floatsisf+0x62>
     f2c:	88 0f       	add	r24, r24
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	97 f9       	bld	r25, 7
     f34:	08 95       	ret

00000f36 <__fp_cmp>:
     f36:	99 0f       	add	r25, r25
     f38:	00 08       	sbc	r0, r0
     f3a:	55 0f       	add	r21, r21
     f3c:	aa 0b       	sbc	r26, r26
     f3e:	e0 e8       	ldi	r30, 0x80	; 128
     f40:	fe ef       	ldi	r31, 0xFE	; 254
     f42:	16 16       	cp	r1, r22
     f44:	17 06       	cpc	r1, r23
     f46:	e8 07       	cpc	r30, r24
     f48:	f9 07       	cpc	r31, r25
     f4a:	c0 f0       	brcs	.+48     	; 0xf7c <__fp_cmp+0x46>
     f4c:	12 16       	cp	r1, r18
     f4e:	13 06       	cpc	r1, r19
     f50:	e4 07       	cpc	r30, r20
     f52:	f5 07       	cpc	r31, r21
     f54:	98 f0       	brcs	.+38     	; 0xf7c <__fp_cmp+0x46>
     f56:	62 1b       	sub	r22, r18
     f58:	73 0b       	sbc	r23, r19
     f5a:	84 0b       	sbc	r24, r20
     f5c:	95 0b       	sbc	r25, r21
     f5e:	39 f4       	brne	.+14     	; 0xf6e <__fp_cmp+0x38>
     f60:	0a 26       	eor	r0, r26
     f62:	61 f0       	breq	.+24     	; 0xf7c <__fp_cmp+0x46>
     f64:	23 2b       	or	r18, r19
     f66:	24 2b       	or	r18, r20
     f68:	25 2b       	or	r18, r21
     f6a:	21 f4       	brne	.+8      	; 0xf74 <__fp_cmp+0x3e>
     f6c:	08 95       	ret
     f6e:	0a 26       	eor	r0, r26
     f70:	09 f4       	brne	.+2      	; 0xf74 <__fp_cmp+0x3e>
     f72:	a1 40       	sbci	r26, 0x01	; 1
     f74:	a6 95       	lsr	r26
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	81 1d       	adc	r24, r1
     f7a:	81 1d       	adc	r24, r1
     f7c:	08 95       	ret

00000f7e <__fp_inf>:
     f7e:	97 f9       	bld	r25, 7
     f80:	9f 67       	ori	r25, 0x7F	; 127
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	08 95       	ret

00000f8a <__fp_nan>:
     f8a:	9f ef       	ldi	r25, 0xFF	; 255
     f8c:	80 ec       	ldi	r24, 0xC0	; 192
     f8e:	08 95       	ret

00000f90 <__fp_powser>:
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	1f 93       	push	r17
     f96:	0f 93       	push	r16
     f98:	ff 92       	push	r15
     f9a:	ef 92       	push	r14
     f9c:	df 92       	push	r13
     f9e:	7b 01       	movw	r14, r22
     fa0:	8c 01       	movw	r16, r24
     fa2:	68 94       	set
     fa4:	06 c0       	rjmp	.+12     	; 0xfb2 <__fp_powser+0x22>
     fa6:	da 2e       	mov	r13, r26
     fa8:	ef 01       	movw	r28, r30
     faa:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
     fae:	fe 01       	movw	r30, r28
     fb0:	e8 94       	clt
     fb2:	a5 91       	lpm	r26, Z+
     fb4:	25 91       	lpm	r18, Z+
     fb6:	35 91       	lpm	r19, Z+
     fb8:	45 91       	lpm	r20, Z+
     fba:	55 91       	lpm	r21, Z+
     fbc:	a6 f3       	brts	.-24     	; 0xfa6 <__fp_powser+0x16>
     fbe:	ef 01       	movw	r28, r30
     fc0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__addsf3x>
     fc4:	fe 01       	movw	r30, r28
     fc6:	97 01       	movw	r18, r14
     fc8:	a8 01       	movw	r20, r16
     fca:	da 94       	dec	r13
     fcc:	69 f7       	brne	.-38     	; 0xfa8 <__fp_powser+0x18>
     fce:	df 90       	pop	r13
     fd0:	ef 90       	pop	r14
     fd2:	ff 90       	pop	r15
     fd4:	0f 91       	pop	r16
     fd6:	1f 91       	pop	r17
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <__fp_pscA>:
     fde:	00 24       	eor	r0, r0
     fe0:	0a 94       	dec	r0
     fe2:	16 16       	cp	r1, r22
     fe4:	17 06       	cpc	r1, r23
     fe6:	18 06       	cpc	r1, r24
     fe8:	09 06       	cpc	r0, r25
     fea:	08 95       	ret

00000fec <__fp_pscB>:
     fec:	00 24       	eor	r0, r0
     fee:	0a 94       	dec	r0
     ff0:	12 16       	cp	r1, r18
     ff2:	13 06       	cpc	r1, r19
     ff4:	14 06       	cpc	r1, r20
     ff6:	05 06       	cpc	r0, r21
     ff8:	08 95       	ret

00000ffa <__fp_round>:
     ffa:	09 2e       	mov	r0, r25
     ffc:	03 94       	inc	r0
     ffe:	00 0c       	add	r0, r0
    1000:	11 f4       	brne	.+4      	; 0x1006 <__fp_round+0xc>
    1002:	88 23       	and	r24, r24
    1004:	52 f0       	brmi	.+20     	; 0x101a <__fp_round+0x20>
    1006:	bb 0f       	add	r27, r27
    1008:	40 f4       	brcc	.+16     	; 0x101a <__fp_round+0x20>
    100a:	bf 2b       	or	r27, r31
    100c:	11 f4       	brne	.+4      	; 0x1012 <__fp_round+0x18>
    100e:	60 ff       	sbrs	r22, 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <__fp_round+0x20>
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	8f 4f       	sbci	r24, 0xFF	; 255
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	08 95       	ret

0000101c <__fp_split3>:
    101c:	57 fd       	sbrc	r21, 7
    101e:	90 58       	subi	r25, 0x80	; 128
    1020:	44 0f       	add	r20, r20
    1022:	55 1f       	adc	r21, r21
    1024:	59 f0       	breq	.+22     	; 0x103c <__fp_splitA+0x10>
    1026:	5f 3f       	cpi	r21, 0xFF	; 255
    1028:	71 f0       	breq	.+28     	; 0x1046 <__fp_splitA+0x1a>
    102a:	47 95       	ror	r20

0000102c <__fp_splitA>:
    102c:	88 0f       	add	r24, r24
    102e:	97 fb       	bst	r25, 7
    1030:	99 1f       	adc	r25, r25
    1032:	61 f0       	breq	.+24     	; 0x104c <__fp_splitA+0x20>
    1034:	9f 3f       	cpi	r25, 0xFF	; 255
    1036:	79 f0       	breq	.+30     	; 0x1056 <__fp_splitA+0x2a>
    1038:	87 95       	ror	r24
    103a:	08 95       	ret
    103c:	12 16       	cp	r1, r18
    103e:	13 06       	cpc	r1, r19
    1040:	14 06       	cpc	r1, r20
    1042:	55 1f       	adc	r21, r21
    1044:	f2 cf       	rjmp	.-28     	; 0x102a <__fp_split3+0xe>
    1046:	46 95       	lsr	r20
    1048:	f1 df       	rcall	.-30     	; 0x102c <__fp_splitA>
    104a:	08 c0       	rjmp	.+16     	; 0x105c <__fp_splitA+0x30>
    104c:	16 16       	cp	r1, r22
    104e:	17 06       	cpc	r1, r23
    1050:	18 06       	cpc	r1, r24
    1052:	99 1f       	adc	r25, r25
    1054:	f1 cf       	rjmp	.-30     	; 0x1038 <__fp_splitA+0xc>
    1056:	86 95       	lsr	r24
    1058:	71 05       	cpc	r23, r1
    105a:	61 05       	cpc	r22, r1
    105c:	08 94       	sec
    105e:	08 95       	ret

00001060 <__fp_zero>:
    1060:	e8 94       	clt

00001062 <__fp_szero>:
    1062:	bb 27       	eor	r27, r27
    1064:	66 27       	eor	r22, r22
    1066:	77 27       	eor	r23, r23
    1068:	cb 01       	movw	r24, r22
    106a:	97 f9       	bld	r25, 7
    106c:	08 95       	ret

0000106e <__gesf2>:
    106e:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_cmp>
    1072:	08 f4       	brcc	.+2      	; 0x1076 <__gesf2+0x8>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	08 95       	ret

00001078 <inverse>:
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 e8       	ldi	r24, 0x80	; 128
    1082:	9f e3       	ldi	r25, 0x3F	; 63
    1084:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__divsf3>
    1088:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_inf>
    108c:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__fp_mpack>

00001090 <ldexp>:
    1090:	0e 94 16 08 	call	0x102c	; 0x102c <__fp_splitA>
    1094:	d8 f3       	brcs	.-10     	; 0x108c <inverse+0x14>
    1096:	99 23       	and	r25, r25
    1098:	c9 f3       	breq	.-14     	; 0x108c <inverse+0x14>
    109a:	94 0f       	add	r25, r20
    109c:	51 1d       	adc	r21, r1
    109e:	a3 f3       	brvs	.-24     	; 0x1088 <inverse+0x10>
    10a0:	91 50       	subi	r25, 0x01	; 1
    10a2:	50 40       	sbci	r21, 0x00	; 0
    10a4:	94 f0       	brlt	.+36     	; 0x10ca <ldexp+0x3a>
    10a6:	59 f0       	breq	.+22     	; 0x10be <ldexp+0x2e>
    10a8:	88 23       	and	r24, r24
    10aa:	32 f0       	brmi	.+12     	; 0x10b8 <ldexp+0x28>
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	91 50       	subi	r25, 0x01	; 1
    10b4:	50 40       	sbci	r21, 0x00	; 0
    10b6:	c1 f7       	brne	.-16     	; 0x10a8 <ldexp+0x18>
    10b8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ba:	51 05       	cpc	r21, r1
    10bc:	2c f7       	brge	.-54     	; 0x1088 <inverse+0x10>
    10be:	88 0f       	add	r24, r24
    10c0:	91 1d       	adc	r25, r1
    10c2:	96 95       	lsr	r25
    10c4:	87 95       	ror	r24
    10c6:	97 f9       	bld	r25, 7
    10c8:	08 95       	ret
    10ca:	5f 3f       	cpi	r21, 0xFF	; 255
    10cc:	ac f0       	brlt	.+42     	; 0x10f8 <ldexp+0x68>
    10ce:	98 3e       	cpi	r25, 0xE8	; 232
    10d0:	9c f0       	brlt	.+38     	; 0x10f8 <ldexp+0x68>
    10d2:	bb 27       	eor	r27, r27
    10d4:	86 95       	lsr	r24
    10d6:	77 95       	ror	r23
    10d8:	67 95       	ror	r22
    10da:	b7 95       	ror	r27
    10dc:	08 f4       	brcc	.+2      	; 0x10e0 <ldexp+0x50>
    10de:	b1 60       	ori	r27, 0x01	; 1
    10e0:	93 95       	inc	r25
    10e2:	c1 f7       	brne	.-16     	; 0x10d4 <ldexp+0x44>
    10e4:	bb 0f       	add	r27, r27
    10e6:	58 f7       	brcc	.-42     	; 0x10be <ldexp+0x2e>
    10e8:	11 f4       	brne	.+4      	; 0x10ee <ldexp+0x5e>
    10ea:	60 ff       	sbrs	r22, 0
    10ec:	e8 cf       	rjmp	.-48     	; 0x10be <ldexp+0x2e>
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8f 4f       	sbci	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	e3 cf       	rjmp	.-58     	; 0x10be <ldexp+0x2e>
    10f8:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>

000010fc <modf>:
    10fc:	fa 01       	movw	r30, r20
    10fe:	dc 01       	movw	r26, r24
    1100:	aa 0f       	add	r26, r26
    1102:	bb 1f       	adc	r27, r27
    1104:	9b 01       	movw	r18, r22
    1106:	ac 01       	movw	r20, r24
    1108:	bf 57       	subi	r27, 0x7F	; 127
    110a:	28 f4       	brcc	.+10     	; 0x1116 <modf+0x1a>
    110c:	22 27       	eor	r18, r18
    110e:	33 27       	eor	r19, r19
    1110:	44 27       	eor	r20, r20
    1112:	50 78       	andi	r21, 0x80	; 128
    1114:	20 c0       	rjmp	.+64     	; 0x1156 <modf+0x5a>
    1116:	b7 51       	subi	r27, 0x17	; 23
    1118:	90 f4       	brcc	.+36     	; 0x113e <modf+0x42>
    111a:	ab 2f       	mov	r26, r27
    111c:	00 24       	eor	r0, r0
    111e:	46 95       	lsr	r20
    1120:	37 95       	ror	r19
    1122:	27 95       	ror	r18
    1124:	01 1c       	adc	r0, r1
    1126:	a3 95       	inc	r26
    1128:	d2 f3       	brmi	.-12     	; 0x111e <modf+0x22>
    112a:	00 20       	and	r0, r0
    112c:	71 f0       	breq	.+28     	; 0x114a <modf+0x4e>
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	44 1f       	adc	r20, r20
    1134:	b3 95       	inc	r27
    1136:	da f3       	brmi	.-10     	; 0x112e <modf+0x32>
    1138:	0e d0       	rcall	.+28     	; 0x1156 <modf+0x5a>
    113a:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__subsf3>
    113e:	61 30       	cpi	r22, 0x01	; 1
    1140:	71 05       	cpc	r23, r1
    1142:	a0 e8       	ldi	r26, 0x80	; 128
    1144:	8a 07       	cpc	r24, r26
    1146:	b9 46       	sbci	r27, 0x69	; 105
    1148:	30 f4       	brcc	.+12     	; 0x1156 <modf+0x5a>
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	66 27       	eor	r22, r22
    1150:	77 27       	eor	r23, r23
    1152:	88 27       	eor	r24, r24
    1154:	90 78       	andi	r25, 0x80	; 128
    1156:	30 96       	adiw	r30, 0x00	; 0
    1158:	21 f0       	breq	.+8      	; 0x1162 <modf+0x66>
    115a:	20 83       	st	Z, r18
    115c:	31 83       	std	Z+1, r19	; 0x01
    115e:	42 83       	std	Z+2, r20	; 0x02
    1160:	53 83       	std	Z+3, r21	; 0x03
    1162:	08 95       	ret

00001164 <__mulsf3>:
    1164:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
    1168:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_round>
    116c:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
    1170:	38 f0       	brcs	.+14     	; 0x1180 <__mulsf3+0x1c>
    1172:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
    1176:	20 f0       	brcs	.+8      	; 0x1180 <__mulsf3+0x1c>
    1178:	95 23       	and	r25, r21
    117a:	11 f0       	breq	.+4      	; 0x1180 <__mulsf3+0x1c>
    117c:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_inf>
    1180:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_nan>
    1184:	11 24       	eor	r1, r1
    1186:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>

0000118a <__mulsf3x>:
    118a:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_split3>
    118e:	70 f3       	brcs	.-36     	; 0x116c <__mulsf3+0x8>

00001190 <__mulsf3_pse>:
    1190:	95 9f       	mul	r25, r21
    1192:	c1 f3       	breq	.-16     	; 0x1184 <__mulsf3+0x20>
    1194:	95 0f       	add	r25, r21
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	55 1f       	adc	r21, r21
    119a:	62 9f       	mul	r22, r18
    119c:	f0 01       	movw	r30, r0
    119e:	72 9f       	mul	r23, r18
    11a0:	bb 27       	eor	r27, r27
    11a2:	f0 0d       	add	r31, r0
    11a4:	b1 1d       	adc	r27, r1
    11a6:	63 9f       	mul	r22, r19
    11a8:	aa 27       	eor	r26, r26
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	aa 1f       	adc	r26, r26
    11b0:	64 9f       	mul	r22, r20
    11b2:	66 27       	eor	r22, r22
    11b4:	b0 0d       	add	r27, r0
    11b6:	a1 1d       	adc	r26, r1
    11b8:	66 1f       	adc	r22, r22
    11ba:	82 9f       	mul	r24, r18
    11bc:	22 27       	eor	r18, r18
    11be:	b0 0d       	add	r27, r0
    11c0:	a1 1d       	adc	r26, r1
    11c2:	62 1f       	adc	r22, r18
    11c4:	73 9f       	mul	r23, r19
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	83 9f       	mul	r24, r19
    11ce:	a0 0d       	add	r26, r0
    11d0:	61 1d       	adc	r22, r1
    11d2:	22 1f       	adc	r18, r18
    11d4:	74 9f       	mul	r23, r20
    11d6:	33 27       	eor	r19, r19
    11d8:	a0 0d       	add	r26, r0
    11da:	61 1d       	adc	r22, r1
    11dc:	23 1f       	adc	r18, r19
    11de:	84 9f       	mul	r24, r20
    11e0:	60 0d       	add	r22, r0
    11e2:	21 1d       	adc	r18, r1
    11e4:	82 2f       	mov	r24, r18
    11e6:	76 2f       	mov	r23, r22
    11e8:	6a 2f       	mov	r22, r26
    11ea:	11 24       	eor	r1, r1
    11ec:	9f 57       	subi	r25, 0x7F	; 127
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	9a f0       	brmi	.+38     	; 0x1218 <__mulsf3_pse+0x88>
    11f2:	f1 f0       	breq	.+60     	; 0x1230 <__mulsf3_pse+0xa0>
    11f4:	88 23       	and	r24, r24
    11f6:	4a f0       	brmi	.+18     	; 0x120a <__mulsf3_pse+0x7a>
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	bb 1f       	adc	r27, r27
    11fe:	66 1f       	adc	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	91 50       	subi	r25, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <__mulsf3_pse+0x64>
    120a:	9e 3f       	cpi	r25, 0xFE	; 254
    120c:	51 05       	cpc	r21, r1
    120e:	80 f0       	brcs	.+32     	; 0x1230 <__mulsf3_pse+0xa0>
    1210:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__fp_inf>
    1214:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>
    1218:	5f 3f       	cpi	r21, 0xFF	; 255
    121a:	e4 f3       	brlt	.-8      	; 0x1214 <__mulsf3_pse+0x84>
    121c:	98 3e       	cpi	r25, 0xE8	; 232
    121e:	d4 f3       	brlt	.-12     	; 0x1214 <__mulsf3_pse+0x84>
    1220:	86 95       	lsr	r24
    1222:	77 95       	ror	r23
    1224:	67 95       	ror	r22
    1226:	b7 95       	ror	r27
    1228:	f7 95       	ror	r31
    122a:	e7 95       	ror	r30
    122c:	9f 5f       	subi	r25, 0xFF	; 255
    122e:	c1 f7       	brne	.-16     	; 0x1220 <__mulsf3_pse+0x90>
    1230:	fe 2b       	or	r31, r30
    1232:	88 0f       	add	r24, r24
    1234:	91 1d       	adc	r25, r1
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	97 f9       	bld	r25, 7
    123c:	08 95       	ret
    123e:	19 f4       	brne	.+6      	; 0x1246 <__mulsf3_pse+0xb6>
    1240:	16 f4       	brtc	.+4      	; 0x1246 <__mulsf3_pse+0xb6>
    1242:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_nan>
    1246:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__fp_mpack>

0000124a <sqrt>:
    124a:	0e 94 16 08 	call	0x102c	; 0x102c <__fp_splitA>
    124e:	b8 f3       	brcs	.-18     	; 0x123e <__mulsf3_pse+0xae>
    1250:	99 23       	and	r25, r25
    1252:	c9 f3       	breq	.-14     	; 0x1246 <__mulsf3_pse+0xb6>
    1254:	b6 f3       	brts	.-20     	; 0x1242 <__mulsf3_pse+0xb2>
    1256:	9f 57       	subi	r25, 0x7F	; 127
    1258:	55 0b       	sbc	r21, r21
    125a:	87 ff       	sbrs	r24, 7
    125c:	0e 94 77 09 	call	0x12ee	; 0x12ee <__fp_norm2>
    1260:	00 24       	eor	r0, r0
    1262:	a0 e6       	ldi	r26, 0x60	; 96
    1264:	40 ea       	ldi	r20, 0xA0	; 160
    1266:	90 01       	movw	r18, r0
    1268:	80 58       	subi	r24, 0x80	; 128
    126a:	56 95       	lsr	r21
    126c:	97 95       	ror	r25
    126e:	28 f4       	brcc	.+10     	; 0x127a <sqrt+0x30>
    1270:	80 5c       	subi	r24, 0xC0	; 192
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	20 f0       	brcs	.+8      	; 0x1282 <sqrt+0x38>
    127a:	26 17       	cp	r18, r22
    127c:	37 07       	cpc	r19, r23
    127e:	48 07       	cpc	r20, r24
    1280:	30 f4       	brcc	.+12     	; 0x128e <sqrt+0x44>
    1282:	62 1b       	sub	r22, r18
    1284:	73 0b       	sbc	r23, r19
    1286:	84 0b       	sbc	r24, r20
    1288:	20 29       	or	r18, r0
    128a:	31 29       	or	r19, r1
    128c:	4a 2b       	or	r20, r26
    128e:	a6 95       	lsr	r26
    1290:	17 94       	ror	r1
    1292:	07 94       	ror	r0
    1294:	20 25       	eor	r18, r0
    1296:	31 25       	eor	r19, r1
    1298:	4a 27       	eor	r20, r26
    129a:	58 f7       	brcc	.-42     	; 0x1272 <sqrt+0x28>
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	20 f0       	brcs	.+8      	; 0x12ac <sqrt+0x62>
    12a4:	26 17       	cp	r18, r22
    12a6:	37 07       	cpc	r19, r23
    12a8:	48 07       	cpc	r20, r24
    12aa:	30 f4       	brcc	.+12     	; 0x12b8 <sqrt+0x6e>
    12ac:	62 0b       	sbc	r22, r18
    12ae:	73 0b       	sbc	r23, r19
    12b0:	84 0b       	sbc	r24, r20
    12b2:	20 0d       	add	r18, r0
    12b4:	31 1d       	adc	r19, r1
    12b6:	41 1d       	adc	r20, r1
    12b8:	a0 95       	com	r26
    12ba:	81 f7       	brne	.-32     	; 0x129c <sqrt+0x52>
    12bc:	b9 01       	movw	r22, r18
    12be:	84 2f       	mov	r24, r20
    12c0:	91 58       	subi	r25, 0x81	; 129
    12c2:	88 0f       	add	r24, r24
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	08 95       	ret

000012ca <square>:
    12ca:	9b 01       	movw	r18, r22
    12cc:	ac 01       	movw	r20, r24
    12ce:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__mulsf3>

000012d2 <__fp_mpack>:
    12d2:	9f 3f       	cpi	r25, 0xFF	; 255
    12d4:	31 f0       	breq	.+12     	; 0x12e2 <__fp_mpack_finite+0xc>

000012d6 <__fp_mpack_finite>:
    12d6:	91 50       	subi	r25, 0x01	; 1
    12d8:	20 f4       	brcc	.+8      	; 0x12e2 <__fp_mpack_finite+0xc>
    12da:	87 95       	ror	r24
    12dc:	77 95       	ror	r23
    12de:	67 95       	ror	r22
    12e0:	b7 95       	ror	r27
    12e2:	88 0f       	add	r24, r24
    12e4:	91 1d       	adc	r25, r1
    12e6:	96 95       	lsr	r25
    12e8:	87 95       	ror	r24
    12ea:	97 f9       	bld	r25, 7
    12ec:	08 95       	ret

000012ee <__fp_norm2>:
    12ee:	91 50       	subi	r25, 0x01	; 1
    12f0:	50 40       	sbci	r21, 0x00	; 0
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	d2 f7       	brpl	.-12     	; 0x12ee <__fp_norm2>
    12fa:	08 95       	ret

000012fc <_exit>:
    12fc:	f8 94       	cli

000012fe <__stop_program>:
    12fe:	ff cf       	rjmp	.-2      	; 0x12fe <__stop_program>
